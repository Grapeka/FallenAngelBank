const  Axios  = require("axios")
const { response, application } = require("express")


const register = ()=>{
    Axios.post('https://fallenangel-bank-api.herokuapp.com/register/check',{
        email: email,
        citizenId :citizenId
    }).then((response)=>{
        if(response){
            console.log("Already have account",response.data)
        }else{
            Axios.post('https://fallenangel-bank-api.herokuapp.com/register',{
               prefix : prefix,
                 fName : fName,
                 lName : lName,
                 phoneNumber: phoneNumber,
                 gender :gender,
                 dob : dob,
                 citizenId :citizenId,
                 email :email,
                 password :password,
                 address :address,
                 pin :pin
            }).then(()=>{
                Axios.post('https://fallenangel-bank-api.herokuapp.com/create/book',{
                    citizenId :citizenId,
                    accountNum: newAccountNum
                }).then(()=>{
                    Axios.post('https://fallenangel-bank-api.herokuapp.com/create/card',{
                        accountNum: newAccountNum,
                        cardId : newCardId
                    }).then(()=>{
                        console.log("Register complete")
                    })
                })
            })
        }
    })
}


const login = ()=>{
    Axios.post('https://fallenangel-bank-api.herokuapp.com/login',{
        email : email,
        password : password
    }).then((response)=>{
        console.log(response.data)
    })
}


const transaction = () =>{
    Axios.post('/account/check',{
        accountNum : TargetAccountNum
    }).then((response)=>{
        if(response){
        const mybalance = myaccount.balance  - value
        const targetbalance = response.data.balance + value
            Axios.put('/update/balance',{
                accountNum: myaccount,
                balance : mybalance  
            }).then(()=>{
                Axios.put('/update/balance',{
                    accountNum: response.data.accountNum,
                    balance : targetbalance
                }).then(()=>{
                    Axios.post('/create/transaction',{
                        fromAccount : myaccount,
                        toAccount : TargetAccountNum,
                        value : value,
                        note : note,
                        categoryId : categoryId,
                        transactionTypeId : transactionTypeId
                    }).then(()=>{
                        console.log("complete transfer")
                    })
                })
            })
        }else{
            console.log("No account in database")
        }
    })
}


const creditTransaction = ()=>{
        const newCurentlimit = currenLimit - value 
    Axios.put('/update/card/currentlimit',{
        cardId: cardId,
        currenLimit: newCurentlimit
    }).then((response)=>{
            Axios.post('/create/transaction/card',{
                fromCreditCardId: fromCreditCardId,
                value: value,
                note: note,
                categoryId :categoryId,
                transactionTypeId : transactionTypeId,
                PaymentDueDate : PaymentDueDate,
                InstallmentPlan: InstallmentPlan,
                Interest: Interest
            }).then(()=>{
                console.log("complete credit transaction")
            })
    })
}


const cerrencytopup = ()=>{
    const newbalance = myaccount.balance - value
    Axios.put('/update/balance',{
            accountNum: accountNum,
            balance: newbalance
    }).then(()=>{
        Axios.post('/create/transaction',{
            fromAccount : myaccount,
            toAccount : TargetAccountNum,
            value : value,
            note : note,
            categoryId : categoryId,
            transactionTypeId : transactionTypeId
        }).then(()=>{
            Axios.post("/create/customer/foreign/currencies",{
                citizenId: citizenId,
                currencyId :currencyId,
                balanceCurrency :balanceCurrency
            }).then(()=>{
                console.log("create currency exchange complete")
            })
        })
    })
}

const CurrencySwap = ()=>{
    const amount = 0
    const Currencies = ""
    const Currencies1 = ""
    const value = 0
     
                value = res.data.rates[Currencies1]
                Axios.put('/update/currency/balance',{
                    citizenId : citizenId,
                    currencyId: Currencies,
                    currentLimit : fromCurrenvalue - amount
                }).then(()=>{

                    if(Currencies1 in myaccount){
                        Axios.put('/update/currency/balance',{
                            citizenId : citizenId,
                            currencyId : Currencies1,
                            currentLimit : targetcurrency + amount
                        }).then(()=>{
                            Axios.post('/create/transaction/currency',{
                                citizenId : citizenId,
                                fromCurrency :fromCurrency,
                                toCurrency : toCurrency,
                                value :value,
                                note : note,
                                rate: rate,
                                fee : fee
                            }).then(()=>{
                                console.log("complete")
                            })
                        })

                    }else{
                        Axios.post('/create/customer/foreign/currencies',{
                            citizenId : citizenId,
                            currencyId : Currencies1,
                            currentLimit : targetcurrency + amount
                        }).then(()=>{
                            Axios.post('/create/transaction/currency',{
                                citizenId : citizenId,
                                fromCurrency :fromCurrency,
                                toCurrency : toCurrency,
                                value :value,
                                note : note,
                                rate: rate,
                                fee : fee
                            }).then(()=>{
                                console.log("complete")
                            })

                        })

                    }
                     
                })              
}


const subproduct = ()=>{
    const newProduct = ""
    Axios.post('/card/subscription`',{
        cardId: cardId
    }).then((response)=>{
            if(newProduct in response.data){
               console.log("You alraady haved.")
            }else{
                Axios.post("/create/card/subscription",{
                    cardId : cardId,
                    subProductId : subProductId
                }).then(()=>{
                    console.log("complete")
                })
            }
    })

}

const addproduct = ()=>{
    Axios.post('/check/product',{
            subProductId : subProductId
    }).then((response)=>{
        if(response){
            console.log("Item in database")
        }else{
            Axios.post('/create/product',{
                subProductId : subProductId,
                monthlyPay : monthlyPay,
                productName : productName
            }).then((response)=>{
                    console.log("inserted")
            })
        }
    })
}
    
const setKyc = ()=>{
    Axios.put("/update/kyc",{
        email:email,
        password:password
    }).then((response)=>{
        if(err){
            console.log("fail")
        }else{
            console.log("Set complete")
        }
    })
}

const getkyc = ()=>{
    Axios.post("/check/kyc",{
        email:email,
        password:password
    }).then((response)=>{
       console.log(response.data)
    })

}


const report1 = ()=>{
   Axios.get("https://fallenangel-bank-api.herokuapp.com/report/citizenId/account/currency").then((response)=>{
       console.log(response.data)
   }) 
}

const report2 = ()=>{
    Axios.get("https://fallenangel-bank-api.herokuapp.com/report/admin/card/all-user/spend").then((response)=>{
        console.log(response.data)
    }) 
 }

 const report3 = ()=>{
    Axios.get("https://fallenangel-bank-api.herokuapp.com/report/admin/totalbalance/currency").then((response)=>{
        console.log(response.data)
    }) 
 }

 const report4 = ()=>{
    Axios.post("https://fallenangel-bank-api.herokuapp.com/report/citizenid/spend/month",{
        citizenId:citizenId
    }).then((response)=>{
        console.log(response.data)
    }) 
 }


 const report5 = ()=>{
    Axios.get("https://fallenangel-bank-api.herokuapp.com/report/income/spend/user").then((response)=>{
        console.log(response.data)
    }) 
 }


 const transwap =()=>{
     
     Axios.post("https://fallenangel-bank-api.herokuapp.com//card/subscription",{
            citizenId:citizenId
     }).then((response)=>{

     })
 }